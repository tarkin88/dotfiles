local function get_pyenv_venv_config()
	local handle = io.popen("pyenv version-name")
	if not handle then
		return nil
	end

	local venv = handle:read("*l")
	handle:close()

	if not venv or venv == "" then
		return nil
	end

	local pyenv_root = os.getenv("PYENV_ROOT") or (os.getenv("HOME") .. "/.pyenv")
	local full_venv_path = pyenv_root .. "/versions/" .. venv

	return full_venv_path .. "/bin/python"
end

return {
	"mfussenegger/nvim-dap",
	dependencies = {
		"nvim-neotest/nvim-nio",
		"mfussenegger/nvim-dap-python",
		"rcarriga/nvim-dap-ui",
	},
	config = function()
		local dap = require("dap")
		local dapui = require("dapui")
		local dap_python = require("dap-python")

		dapui.setup()
		dap.listeners.after.event_initialized["dapui_config"] = function()
			dapui.open()
		end
		dap.listeners.before.event_terminated["dapui_config"] = function()
			dapui.close()
		end
		dap.listeners.before.event_exited["dapui_config"] = function()
			dapui.close()
		end

		local python_path = get_pyenv_venv_config()
		if python_path then
			dap_python.setup(python_path)
		else
			vim.notify("⚠️ Could not find pyenv virtualenv", vim.log.levels.WARN)
		end

		vim.keymap.set("n", "<F5>", function()
			require("dap").continue()
		end)
		vim.keymap.set("n", "<F10>", function()
			require("dap").step_over()
		end)
		vim.keymap.set("n", "<F11>", function()
			require("dap").step_into()
		end)
		vim.keymap.set("n", "<F12>", function()
			require("dap").step_out()
		end)
		vim.keymap.set("n", "<F8>", function()
			require("dap").toggle_breakpoint()
		end)
	end,

	vim.api.nvim_create_user_command("DapAttach", function()
		require("dap").run({
			type = "python",
			request = "attach",
			connect = {
				host = "127.0.0.1",
				port = 5678,
			},
			mode = "remote",
			name = "Attach to Django debugpy",
			justMyCode = false,
		})
	end, {}),
}
